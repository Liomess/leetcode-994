class Solution:
    from collections import deque
    def orangesRotting(self, grid: List[List[int]]) -> int:
        q=deque()
        n=len(grid)
        m=len(grid[0])
        visited=[[False for i in range(m)]for j in range(n)]
        for i in range(n):
            for j in range(m):
                if grid[i][j]==2:
                    q.append([i,j,0])
                    visited[i][j]=True
        t=0
        while len(q)!=0:
            arr=q.popleft()
            i,j,t=arr[0],arr[1],arr[2]
            if i-1>=0 and grid[i-1][j]==1 and visited[i-1][j]==False:
                q.append([i-1,j,t+1])
                grid[i-1][j]=2
                visited[i-1][j]=True
            if i+1<n and grid[i+1][j]==1 and visited[i+1][j]==False:
                q.append([i+1,j,t+1])
                grid[i+1][j]=2
                visited[i+1][j]=True
            if j-1>=0 and grid[i][j-1]==1 and visited[i][j-1]==False:
                q.append([i,j-1,t+1])
                grid[i][j-1]=2
                visited[i][j-1]=True
            if j+1<m and grid[i][j+1]==1 and visited[i][j+1]==False:
                q.append([i,j+1,t+1])
                grid[i][j+1]=2
                visited[i][j+1]=True
        for i in range(n):
            for j in range(m):
                if grid[i][j]==1:
                    return -1
        return t
